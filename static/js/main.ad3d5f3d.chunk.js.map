{"version":3,"sources":["components/TutorialHeader/index.js","components/TutorialHeader/TutorialHeader.js","content/LandingPage/index.js","content/LandingPage/LandingPage.js","content/RepoPage/index.js","content/RepoPage/RepoPage.js","App.js","serviceWorker.js","index.js"],"names":["TutorialHeader","react_default","a","createElement","UIShell","aria-label","element","Link","to","prefix","_20_default","user_avatar_20_default","app_switcher_20_default","LandingPage","RepoPage","App","Fragment","components_TutorialHeader","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UACeA,ECcQ,kBACrBC,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,aAAW,mBACjBJ,EAAAC,EAAAC,cAACC,EAAA,cAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYE,QAASC,IAAMC,GAAG,IAAIC,OAAO,OAAzC,mBAGAR,EAAAC,EAAAC,cAACC,EAAA,iBAAD,CAAkBC,aAAW,mBAC3BJ,EAAAC,EAAAC,cAACC,EAAA,eAAD,CAAgBE,QAASC,IAAMC,GAAG,UAAlC,iBAIFP,EAAAC,EAAAC,cAACC,EAAA,gBAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,mBAAD,CAAoBC,aAAW,iBAC7BJ,EAAAC,EAAAC,cAACO,EAAAR,EAAD,OAEFD,EAAAC,EAAAC,cAACC,EAAA,mBAAD,CAAoBC,aAAW,eAC7BJ,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,OAEFD,EAAAC,EAAAC,cAACC,EAAA,mBAAD,CAAoBC,aAAW,gBAC7BJ,EAAAC,EAAAC,cAACS,EAAAV,EAAD,kBCjCOW,ECCK,WAClB,OAAOZ,EAAAC,EAAAC,cAAA,4BCFMW,ECCE,WACf,OAAOb,EAAAC,EAAAC,cAAA,yBCqBMY,mLAdX,OACEd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACEf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjCZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWP,cAR1BQ,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAC4B,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ad3d5f3d.chunk.js","sourcesContent":["import TutorialHeader from './TutorialHeader';\nexport default TutorialHeader;\n","import React from 'react';\r\nimport {\r\n  Header,\r\n  HeaderName,\r\n  HeaderNavigation,\r\n  HeaderMenuItem,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  SkipToContent,\r\n} from 'carbon-components-react/lib/components/UIShell';\r\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\r\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\r\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TutorialHeader = () => (\r\n  <Header aria-label=\"Carbon Tutorial\">\r\n    <SkipToContent />\r\n    <HeaderName element={Link} to=\"/\" prefix=\"IBM\">\r\n      Carbon Tutorial\r\n    </HeaderName>\r\n    <HeaderNavigation aria-label=\"Carbon Tutorial\">\r\n      <HeaderMenuItem element={Link} to=\"/repos\">\r\n        Repositories\r\n      </HeaderMenuItem>\r\n    </HeaderNavigation>\r\n    <HeaderGlobalBar>\r\n      <HeaderGlobalAction aria-label=\"Notifications\">\r\n        <Notification20 />\r\n      </HeaderGlobalAction>\r\n      <HeaderGlobalAction aria-label=\"User Avatar\">\r\n        <UserAvatar20 />\r\n      </HeaderGlobalAction>\r\n      <HeaderGlobalAction aria-label=\"App Switcher\">\r\n        <AppSwitcher20 />\r\n      </HeaderGlobalAction>\r\n    </HeaderGlobalBar>\r\n  </Header>\r\n);\r\n\r\nexport default TutorialHeader;\r\n","import LandingPage from './LandingPage';\nexport default LandingPage;\n","import React from 'react';\r\n\r\nconst LandingPage = () => {\r\n  return <div>LANDING PAGE</div>;\r\n};\r\n\r\nexport default LandingPage;\r\n","import RepoPage from './RepoPage';\nexport default RepoPage;\n","import React from 'react';\r\n\r\nconst RepoPage = () => {\r\n  return <div>REPO PAGE</div>;\r\n};\r\n\r\nexport default RepoPage;\r\n","import React, { Component } from 'react';\r\nimport './app.scss';\r\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\r\nimport TutorialHeader from './components/TutorialHeader';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport LandingPage from './content/LandingPage';\r\nimport RepoPage from './content/RepoPage';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <TutorialHeader />\r\n        <Content>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={LandingPage} />\r\n            <Route path=\"/repos\" component={RepoPage} />\r\n          </Switch>\r\n        </Content>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
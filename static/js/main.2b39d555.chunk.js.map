{"version":3,"sources":["components/TutorialHeader/index.js","components/TutorialHeader/TutorialHeader.js","content/LandingPage/index.js","content/LandingPage/LandingPage.js","content/RepoPage/index.js","content/RepoPage/RepoPage.js","App.js","serviceWorker.js","index.js"],"names":["TutorialHeader","react_default","a","createElement","Header","aria-label","SkipToContent","HeaderName","element","Link","to","prefix","HeaderNavigation","HeaderMenuItem","HeaderGlobalBar","HeaderGlobalAction","_20_default","user_avatar_20_default","app_switcher_20_default","LandingPage","RepoPage","App","Fragment","components_TutorialHeader","Content","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sYACeA,ECcQ,kBACrBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,aAAW,mBACjBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,MACAL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAYC,QAASC,IAAMC,GAAG,IAAIC,OAAO,OAAzC,mBAGAV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAkBP,aAAW,mBAC3BJ,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAgBL,QAASC,IAAMC,GAAG,UAAlC,iBAIFT,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAoBV,aAAW,iBAC7BJ,EAAAC,EAAAC,cAACa,EAAAd,EAAD,OAEFD,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAoBV,aAAW,eAC7BJ,EAAAC,EAAAC,cAACc,EAAAf,EAAD,OAEFD,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAoBV,aAAW,gBAC7BJ,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,iBCjCOiB,ECAK,WAClB,OAAOlB,EAAAC,EAAAC,cAAA,4BCDMiB,ECAE,WACf,OAAOnB,EAAAC,EAAAC,cAAA,yBCsBMkB,mLAdX,OACEpB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoB,SAAA,KACErB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjClB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWR,cAR1BS,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2b39d555.chunk.js","sourcesContent":["import TutorialHeader from './TutorialHeader';\r\nexport default TutorialHeader;","import React from 'react';\r\nimport {\r\n  Header,\r\n  HeaderName,\r\n  HeaderNavigation,\r\n  HeaderMenuItem,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  SkipToContent,\r\n} from 'carbon-components-react/es/components/UIShell';\r\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\r\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\r\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TutorialHeader = () => (\r\n  <Header aria-label=\"Carbon Tutorial\">\r\n    <SkipToContent />\r\n    <HeaderName element={Link} to=\"/\" prefix=\"IBM\">\r\n      Carbon Tutorial\r\n    </HeaderName>\r\n    <HeaderNavigation aria-label=\"Carbon Tutorial\">\r\n      <HeaderMenuItem element={Link} to=\"/repos\">\r\n        Repositories\r\n      </HeaderMenuItem>\r\n    </HeaderNavigation>\r\n    <HeaderGlobalBar>\r\n      <HeaderGlobalAction aria-label=\"Notifications\">\r\n        <Notification20 />\r\n      </HeaderGlobalAction>\r\n      <HeaderGlobalAction aria-label=\"User Avatar\">\r\n        <UserAvatar20 />\r\n      </HeaderGlobalAction>\r\n      <HeaderGlobalAction aria-label=\"App Switcher\">\r\n        <AppSwitcher20 />\r\n      </HeaderGlobalAction>\r\n    </HeaderGlobalBar>\r\n  </Header>\r\n);\r\nexport default TutorialHeader;","import LandingPage from './LandingPage';\r\nexport default LandingPage;","import React from 'react';\r\nconst LandingPage = () => {\r\n  return <div>LANDING PAGE</div>;\r\n};\r\nexport default LandingPage;","import RepoPage from './RepoPage';\r\nexport default RepoPage;","import React from 'react';\r\nconst RepoPage = () => {\r\n  return <div>REPO PAGE</div>;\r\n};\r\nexport default RepoPage;","import React, { Component } from 'react';\r\nimport './app.scss';\r\nimport { Content } from 'carbon-components-react/es/components/UIShell';\r\nimport TutorialHeader from './components/TutorialHeader';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport LandingPage from './content/LandingPage';\r\nimport RepoPage from './content/RepoPage';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <TutorialHeader />\r\n        <Content>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={LandingPage} />\r\n            <Route path=\"/repos\" component={RepoPage} />\r\n          </Switch>\r\n        </Content>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}